package stepDefinitions;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;

import java.io.IOException;

import Resources.TestData;
import Resources.Utils;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

public class StepDefinition extends Utils {

	RequestSpecification res;
	ResponseSpecification resspec;
	Response response;

	@Given("Add the payload with {string} {string} {string}")
	public void add_the_payload_with(String string, String string2, String string3) throws IOException {
		// Write code here that turns the phrase above into concrete actions

		TestData data = new TestData();

		res = given().spec(requestSpecification()).body(data.AddPlacePayload(name,language,address));

	}

	@When("user calls {string} with {string} http request")
	public void user_calls_with_http_request(String string, String string2) {
		// Write code here that turns the phrase above into concrete actions
		resspec = new ResponseSpecBuilder().expectStatusCode(200).expectContentType(ContentType.JSON).build();
		response = res.when().post("/maps/api/place/add/json").then().log().all().spec(resspec).extract().response();
	}

	@Then("the API call got success with status code {int}")
	public void the_api_call_got_success_with_status_code(Integer int1) {
		// Write code here that turns the phrase above into concrete actions

		assertEquals(response.getStatusCode(), 200);
	}

	@Then("{string} in response body is {string}")
	public void in_response_body_is(String actualValue, String expectedValue) {
		// Write code here that turns the phrase above into concrete actions
		String SResponse = response.asString();
		System.out.println(SResponse);
		JsonPath js = new JsonPath(SResponse);
		assertEquals(js.get(actualValue).toString(), expectedValue);

	}

}
